@compiler >= 6

include "String.aes"
include "List.aes"

payable contract AensMarketContact =

    datatype event =
        PutNameEvent(address, string, int, int)
        | RevokedNameEvent(address, string)
        | RaiseNameEvent(int, int, int)
        | DealNameEvent(string, address, address, int)


    record state = {
        names_owner  : map(string, address),
        //In Progress Aens
        names_order  : map(string, order),
        //Aens swap record
        names_record : map(address, list(order)),
        //Config
        config       : config}

    record order = {
        // aens name
        name           : string,
        // left aens owner
        old_owner      : address,
        // new aens owner
        new_owner      : address,
        // start set amount
        start_amount   : int,
        // new owner left pay amount
        left_amount    : int,
        // seller recive amount
        current_amount : int,
        // all bonus
        all_bonus_fee  : int,
        // create order height
        start_height   : int,
        // end order height
        over_height    : int,
        // premium count
        premium_count  : int}

    record config = {
        max_order_height       : int,
        decimals               : int,
        bonus_fee              : int,
        platform_fee           : int,
        foundation_fee         : int,
        platform_address       : address,
        foundation_address     : address,
        delay_height           : int,
        record_max_count       : int,
        length_multiple        : int,
        min_premium_percentage : int}

    record fees = {
        platform   : int,
        foundation : int,
        amount     : int}

    stateful entrypoint init () =
        { names_owner  = {},
          names_order  = {},
          names_record = {},
          config = {
            max_order_height       = 480 * 30,
            decimals               = 1000000000000000000,
            bonus_fee              = 10,
            platform_fee           = 10,
            foundation_fee         = 15,
            platform_address       = ak_pK1Q4WxyrZpNGqpfgw8kCJmTouvCKW9X4ZxCP16hViazbqU8T,
            foundation_address     = ak_pK1Q4WxyrZpNGqpfgw8kCJmTouvCKW9X4ZxCP16hViazbqU8T,
            delay_height           = 10,
            record_max_count       = 10,
            length_multiple        = 10,
            min_premium_percentage = 10}}


    payable stateful entrypoint put_name(name : string,
                                sig           : signature,
                                amount        : int,
                                height        : int) =
        switch(AENS.lookup(name))
                Some(AENS.Name(owner, FixedTTL(expiry), _)) =>
                    require(owner == Call.caller, "The domain name does not belong to you")
                    require(height =< state.config.max_order_height, "The maximum height limit is exceeded")
                    let nameMaxPrice = get_name_max_price(name)
                    if(amount > nameMaxPrice)
                        require(Call.value >= nameMaxPrice / 100, "Insufficient handling charges are paid")
                        Chain.spend(state.config.platform_address , Call.value)
                    AENS.transfer(owner, Contract.address, name, signature = sig)
                    let order = {
                        name           = name,
                        old_owner      = owner,
                        new_owner      = owner,
                        start_amount   = amount,
                        current_amount = amount,
                        left_amount    = amount,
                        all_bonus_fee  = 0,
                        start_height   = Chain.block_height,
                        over_height    = Chain.block_height + height,
                        premium_count  = 0 }

                    put(state {
                        names_order[name] = order,
                        names_owner[name] = Call.caller})
                    Chain.event(PutNameEvent(Call.caller, name, amount, height))

                None => abort("Domain name does not exist")


    stateful entrypoint revoked_name(name : string) =
        switch(Map.lookup(name,state.names_order))
            Some(order) =>
                require(order.old_owner == Call.caller,"The domain name does not belong to you")
                require(order.premium_count == 0,"The current domain name status cannot be revoked")
                AENS.transfer(Contract.address, order.old_owner, name)
                put(state{
                    names_order = Map.delete(name,state.names_order),
                    names_owner = Map.delete(name,state.names_owner)})
                Chain.event(RevokedNameEvent(Call.caller, name))
            None => abort("The domain name was not found")



    payable stateful entrypoint raise_name(name : string) =
        switch(Map.lookup(name,state.names_order))
            Some(order) =>
                require(Chain.block_height =< order.over_height ,"The domain over height reached")
                require(Call.value >= get_name_next_raise_price(order.left_amount),"amount count not enough")

                let current_bonus_fee = Call.value / 1000 * state.config.bonus_fee
                if (order.premium_count > 0)

                    Chain.spend(order.new_owner, order.left_amount)
                    Chain.spend(order.new_owner, current_bonus_fee)

                let new_order = {
                    name           = order.name,
                    old_owner      = order.old_owner,
                    new_owner      = Call.caller,
                    start_amount   = order.start_amount,
                    left_amount    = Call.value,
                    current_amount = get_new_current_amount(order),
                    all_bonus_fee  = get_new_all_bonus_fee(order),
                    start_height   = order.start_height,
                    over_height    = get_new_over_height(order.over_height),
                    premium_count  = order.premium_count + 1 }
                put(state{names_order[order.name] = new_order})
                Chain.event(RaiseNameEvent(order.left_amount, Call.value, current_bonus_fee))


            None => abort("The domain name was not found")

    stateful entrypoint deal_name(name : string) =
        switch(Map.lookup(name,state.names_order))
            Some(order) =>
                require(Chain.block_height > order.over_height ,"The domain not over height reached")

                let fees = get_name_fee(order.current_amount)
                Chain.spend(state.config.platform_address, fees.foundation)
                Chain.spend(state.config.platform_address , fees.platform)
                Chain.spend(order.old_owner , fees.amount)
                AENS.transfer(Contract.address, order.new_owner, name)

                add_names_record(order, get_name_records(order.new_owner))
                add_names_record(order, get_name_records(order.old_owner))

                Chain.event(DealNameEvent(name, order.new_owner, order.old_owner, order.current_amount))

                put(state{
                    names_order = Map.delete(name,state.names_order),
                    names_owner = Map.delete(name,state.names_owner)})
            None => abort("The domain name was not found")


    entrypoint get_names_order() =
        state.names_order

    entrypoint get_name_order(name: string) =
        switch(Map.lookup(name,state.names_order))
            Some(order) =>
                order
            None => abort("The domain name was not found")

    function get_new_current_amount(order : order) =
        if (order.premium_count > 0)
            Call.value - (Call.value / 1000 * state.config.bonus_fee + order.all_bonus_fee)
        else
            Call.value

    function get_new_all_bonus_fee(order : order) =
        if (order.premium_count > 0)
            order.all_bonus_fee + (Call.value / 1000 * state.config.bonus_fee)
        else
            0

    stateful function add_names_record(order : order, records : list(order)) =
        if(List.length(records) >= state.config.record_max_count)
            let order_records = List.drop(List.length(records), records)
            let order_records = List.insert_at(0, order, order_records)
            put(state{ names_record[Call.caller] = order_records})
        else
            let order_records = List.insert_at(0, order, records)
            put(state{ names_record[Call.caller] = order_records})
            put(state{names_order[order.name] = order})

    entrypoint get_name_records(account : address) =
            switch(Map.lookup(account, state.names_record))
                Some(records) => records
                None => []

    function get_new_over_height(over_height : int) =
        if (Chain.block_height - over_height < state.config.delay_height)
            Chain.block_height + state.config.delay_height
        else
            over_height


    entrypoint get_name_next_raise_price(current_amount : int) =
        current_amount + current_amount / 100 * state.config.min_premium_percentage


    entrypoint get_name_fee(amount : int) =

        let platform = amount / 100 * 8
        let foundation = platform / 100 * 15
        let platform = platform - foundation
        let new_amount = amount - platform - foundation
        {platform = platform, foundation = foundation, amount = new_amount}

    entrypoint get_name_max_price(name : string) =
        let nameLength = String.length(name) - 6
        if(nameLength == 1)
            format_name_length_price(570)
        elif(nameLength == 2)
            format_name_length_price(352)
        elif(nameLength == 3)
            format_name_length_price(217)
        elif(nameLength == 4)
            format_name_length_price(134)
        elif(nameLength == 5)
            format_name_length_price(83)
        elif(nameLength == 6)
            format_name_length_price(51)
        elif(nameLength == 7)
            format_name_length_price(31)
        elif(nameLength == 8)
            format_name_length_price(19)
        elif(nameLength == 9)
            format_name_length_price(12)
        elif(nameLength == 10)
            format_name_length_price(7)
        elif(nameLength == 11)
            format_name_length_price(4)
        elif(nameLength > 12)
            format_name_length_price(3)
        else
            format_name_length_price(3)


    entrypoint format_name_length_price(price : int) :int =
        price * state.config.decimals * state.config.length_multiple


    stateful entrypoint update_config(config : config) =
        protocol_restrict()
        put(state{config = config})

    stateful entrypoint receive_name_admin(name : string) =
        protocol_restrict()
        AENS.transfer(Contract.address,Call.caller, name)

    stateful entrypoint receive_balance_admin(name : string) =
        protocol_restrict()
        Chain.spend(Call.caller,Contract.balance)

    function protocol_restrict() =
        require(Call.origin == Contract.creator, "PROTOCOL_RESTRICTED")

    entrypoint get_state() =
        state
